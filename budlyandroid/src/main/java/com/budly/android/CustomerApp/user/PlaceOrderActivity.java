package com.budly.android.CustomerApp.user;import org.json.JSONException;import org.json.JSONObject;import android.app.AlertDialog;import android.app.ProgressDialog;import android.content.DialogInterface;import android.content.Intent;import android.location.Location;import android.os.Bundle;import android.os.Handler;import android.util.Log;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.widget.Button;import android.widget.ImageView;import android.widget.TextView;import com.budly.android.CustomerApp.BaseActivity;import com.budly.android.CustomerApp.Common;import com.budly.android.CustomerApp.Globals;import com.budly.R;import com.budly.android.CustomerApp.MyApplication;import com.budly.android.CustomerApp.TransactionActivity;import com.budly.android.CustomerApp.beans.User;import com.budly.android.CustomerApp.driver.StatusActivity;import com.google.android.gcm.GCMRegistrar;//import com.google.android.gms.location.LocationClient;import com.google.android.gms.analytics.HitBuilders;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.location.LocationRequest;import com.budly.android.CustomerApp.td.http.HttpBasicClientHelper;import com.budly.android.CustomerApp.td.http.MyJsonAsyncCallback;import com.budly.android.CustomerApp.td.utils.PreferenceHelper;import com.turbomanage.httpclient.HttpResponse;public class PlaceOrderActivity extends BaseActivity implements        View.OnClickListener {    ImageView btn_left;    Button btn_next;    PreferenceHelper preferenceHelper;    User mUser;    TextView version;    private static final LocationRequest REQUEST = LocationRequest.create()            .setInterval(10000) // 5 seconds            .setFastestInterval(16) // 16ms = 60fps            .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);    //	private LocationClient mLocationClient;    private GoogleApiClient mLocationClient;    Location mCurrentLocation;    public void onClick(View paramView) {        switch (paramView.getId()) {            case R.id.btn_next:                startActivity(new Intent(this, LocationActivity.class));                break;            case R.id.btn_left:                final String[] time = { "Transactions", "Update profile" };                AlertDialog.Builder builder = new AlertDialog.Builder(PlaceOrderActivity.this);                builder.setTitle("Budly");                builder.setItems(time, new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int positon) {                        if(positon==0) {                            startActivity(new Intent(PlaceOrderActivity.this, TransactionActivity.class));                        } else {                            startActivity(new Intent(PlaceOrderActivity.this, ProfileUpdateActivity.class));                        }                    }                });                builder.setPositiveButton("Cancel", new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int whichButton) {                        dialog.dismiss();                    }                });                builder.create().show();                break;        }    }    protected void onCreate(Bundle paramBundle) {        super.onCreate(paramBundle);        preferenceHelper = PreferenceHelper.getInstance();        mUser = preferenceHelper.getUserInfo();        StatusActivity.IS_FIRST=true;        setContentView(R.layout.user_activity_place_order);        this.btn_next = ((Button) findViewById(R.id.btn_next));        this.btn_next.setOnClickListener(this);        this.btn_left = ((ImageView) findViewById(R.id.btn_left));        this.btn_left.setOnClickListener(this);        version = (TextView) findViewById(R.id.txt_version_customer);        try {            version.setText("v" + getPackageManager().getPackageInfo(getPackageName(), 0).versionName);        } catch (Exception e){e.printStackTrace();}//        LatLng location = preferenceHelper.getLocation();//        if(location!=null) {//            try {//                onStart(location.latitude, location.longitude);//            } catch (Exception e) { }//        }    }    void checkOrder(){        showMyDialog("checking pending orders");        String json = preferenceHelper.getValue(PreferenceHelper.LASTORDER);        if (json.equals("")){            hiddenDialog();            return;        }        try {            final JSONObject jo = new JSONObject(json);            Log.i("last order",jo.toString());            int orderId = jo.getInt("order_id");            HttpBasicClientHelper client = new HttpBasicClientHelper(new MyJsonAsyncCallback(){                @Override                public void onSuccess(HttpResponse httpResponse, JSONObject re) {                    Log.i("response",re.toString());                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            hiddenDialog();                        }                    });                    try {                        int status = re.getInt("status");                        if(status==200) {                            if (re.getJSONObject("data").getString("status").equals("processing")){                                Intent intent = new Intent(PlaceOrderActivity.this, OrderConfirmedActivity.class);                                intent.putExtra("driver", jo.getString("driver"));                                intent.putExtra("order_id", jo.getInt("order_id"));                                intent.putExtra("supplier_id", jo.getInt("supplier_id"));                                intent.putExtra("supplier_name", jo.getString("supplier_name"));                                intent.putExtra("distance", jo.getInt("distance"));                                intent.putExtra("thumb", jo.getString("thumb"));                                startActivity(intent);                            }                            return;                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                    hiddenDialog();                }                @Override                public void onFailure(Exception e) {                    // TODO Auto-generated method stub                    super.onFailure(e);                    hiddenDialog();                    try {                        progressDialog.dismiss();                    } catch (Exception e1) {                        e1.printStackTrace();                    }                }            });            client.getOrderStatus(orderId);        } catch (JSONException e) {            e.printStackTrace();        }    }    ProgressDialog progressDialog;    Handler mHandler = new Handler();    void hiddenDialog() {        try {            runOnUiThread(new Runnable() {                @Override                public void run() {                    try {                        if(progressDialog!=null && progressDialog.isShowing()) progressDialog.dismiss();                    } catch (Exception e) { }                }            });        } catch (Exception e) { }    }    Runnable rHiddenDlg = new Runnable() {        @Override        public void run() {            hiddenDialog();        }    };    void showMyDialog(final String msg) {        try {            runOnUiThread(new Runnable() {                @Override                public void run() {                    try {                        if(progressDialog!=null && progressDialog.isShowing()) {                            progressDialog.setMessage(msg);                        } else {                            progressDialog = ProgressDialog.show(PlaceOrderActivity.this, "", msg);                        }                    } catch (Exception e) { }                    mHandler.removeCallbacks(rHiddenDlg);                    mHandler.postDelayed(rHiddenDlg, 120000);                }            });        } catch (Exception e) { e.printStackTrace(); }    }    void registerGCM() {        final HttpBasicClientHelper client = new HttpBasicClientHelper(new MyJsonAsyncCallback());//		if (Build.FINGERPRINT.startsWith("generic")) {//		    // running on an emulator//			Log.e("Tuan", "Emulator======================");//		} else {        // running on a device        // Make sure the device has the proper dependencies.        GCMRegistrar.checkDevice(this);        // Make sure the manifest was properly set - comment out this line        // while developing the app, then uncomment it when it's ready.        GCMRegistrar.checkManifest(this);        String regId = GCMRegistrar.getRegistrationId(this);        Log.e("Tuan", "GCMID="+regId);        // Check if regid already presents        if (regId.equals("")) {            GCMRegistrar.register(this, Common.PROJECT_NUMBER);        }        new Thread(new Runnable() {            @Override            public void run() {                String regId="";                while (regId.equals("")) {                    regId = GCMRegistrar.getRegistrationId(PlaceOrderActivity.this);                    Log.i("Tuan", "Registered with id "+regId);                    preferenceHelper.setGCMID(regId);                    try {                        Thread.sleep(1000);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }                client.updateDevice(mUser.id, regId);            }        }).start();//		}    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        MenuInflater inflater = getMenuInflater();        inflater.inflate(R.menu.user, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle item selection        switch (item.getItemId()) {            case R.id.transaction:                //Toast.makeText(this, "Under construction", Toast.LENGTH_LONG).show();                startActivity(new Intent(this, TransactionActivity.class));                return true;            case R.id.update_profile:                startActivity(new Intent(this, ProfileUpdateActivity.class));                return true;            default:                return super.onOptionsItemSelected(item);        }    }    void onStart(final double lat, final double lng) {        HttpBasicClientHelper client = new HttpBasicClientHelper(new MyJsonAsyncCallback(){            @Override            public void onSuccess(HttpResponse httpResponse, JSONObject re) {                try {                    JSONObject data = re.getJSONObject("data");                    String status = data.getString("status");                    Common.DISTANCE_DEFAULT = data.getInt("distance_default");                    try {                        if(status.equals("freeze")) {                            runOnUiThread(new Runnable() {                                @Override                                public void run() {                                    AlertDialog dialog = new AlertDialog.Builder(PlaceOrderActivity.this)                                            .setTitle("Budly")                                            .setMessage("Your account has been frozen by Budly")                                            .setPositiveButton("Ok", new DialogInterface.OnClickListener() {                                                public void onClick(DialogInterface dialog, int which) {                                                    dialog.dismiss();                                                    finish();                                                }                                            })                                            .setIcon(android.R.drawable.ic_dialog_alert)                                            .setCancelable(false)                                            .show();                                }                            });                        }                    } catch (Exception e) { }                    return;                } catch (Exception e) { }                mCurrentLocation = null;            }            @Override            public void onFailure(Exception e) {                super.onFailure(e);                mCurrentLocation = null;            }        });        client.on_start(mUser.id, lat, lng);    }    //	@Override//	public void onLocationChanged(Location arg0) {//		Log.e("Tuan2", "loaction change==============");//		if(mCurrentLocation==null) {////			mCurrentLocation = mLocationClient.getLastLocation();//            mCurrentLocation= LocationServices.FusedLocationApi.getLastLocation(mLocationClient);////            if(mCurrentLocation==null) return;//			onStart(mCurrentLocation.getLatitude(), mCurrentLocation.getLongitude());//		}//	}////	@Override//	public void onConnectionFailed(ConnectionResult arg0) {//		Log.e("Tuan2", "loaction connect failed==============");//	}////	@Override//	public void onConnected(Bundle arg0) {//		mLocationClient.requestLocationUpdates(REQUEST, this); // LocationListener//		Log.e("Tuan2", "loaction connected==============");//	}////	@Override//	public void onDisconnected() {//		Log.e("Tuan2", "loaction disconnected==============");//	}//    @Override    protected void onResume() {        checkOrder();        Common.checkEvents(this);//        if (mLocationClient == null) {////			mLocationClient = new LocationClient(getApplicationContext(), this, this); // OnConnectionFailedListener//            mLocationClient = new GoogleApiClient.Builder(this)//                    .addApi(LocationServices.API)//                    .addConnectionCallbacks(new GoogleApiClient.ConnectionCallbacks() {//                        @Override//                        public void onConnected(Bundle bundle) {//                            LocationServices.FusedLocationApi.requestLocationUpdates(mLocationClient, REQUEST,//                                    new LocationListener() {//                                        @Override//                                        public void onLocationChanged(Location location) {//                                            Log.e("Tuan2", "loaction change==============");//                                            if(mCurrentLocation==null) {////			mCurrentLocation = mLocationClient.getLastLocation();//                                                mCurrentLocation= LocationServices.FusedLocationApi.getLastLocation(mLocationClient);////                                                if(mCurrentLocation==null) return;//                                                onStart(mCurrentLocation.getLatitude(), mCurrentLocation.getLongitude());//                                            }//                                        }//                                    }); // LocationListener////                        }////                        @Override//                        public void onConnectionSuspended(int i) {////                        }//                    })//                    .addOnConnectionFailedListener(new GoogleApiClient.OnConnectionFailedListener() {//                        @Override//                        public void onConnectionFailed(ConnectionResult connectionResult) {//                            Log.e("Tuan2", "loaction connected==============");//                        }//                    })//                    .build();//        }//        mLocationClient.connect();        super.onResume();    }    @Override    protected void onPause() {//        if (mLocationClient != null) {//            mLocationClient.disconnect();//        }        super.onPause();    }     }